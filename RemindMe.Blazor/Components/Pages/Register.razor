@page "/register"

@rendermode InteractiveServer
@using RemindMe.Contracts.Requests
@inject NavigationManager NavigationManager
@inject HttpClient httpClient

<MudPaper Class="pa-2;" Elevation="0" Style="width:60vh; height:contain; align-self:center; overflow:hidden; padding: 6px">
    <EditForm Model="@userRequest" OnValidSubmit="OnValidSubmit" FormName="RegisterForm">
        <DataAnnotationsValidator />
        <MudStack Style="height: 100%;">
            <MudButton Variant="Variant.Outlined" Color="Color.Default" Class="ml-auto" Style="margin: auto; text-transform:initial;">
                <MudIcon Icon="@Icons.Custom.Brands.Google"/>&nbsp; Sign In by Google
                </MudButton>
                <MudText Style="margin:auto">or</MudText>
            <MudTextField Label="USER NAME" @bind-Value="userRequest.UserName" For="@(() => userRequest.UserName)" Variant="Variant.Outlined" />
            <MudTextField Label="E-MAIL" @bind-Value="userRequest.Email" For="@(() => userRequest.Email)" Variant="Variant.Outlined" />
            <MudTextField Mask="@(new PatternMask("000-000-00-00"))" Label="PHONE NUMBER IN FORMAT: 099-***-**-**" Variant="Variant.Outlined"
            Class="justify-content-center" @bind-Value="userRequest.PhoneNumber" For="@(() => userRequest.PhoneNumber)" />
            <MudTextField Label="PASSWORD" @bind-Value="userRequest.Password" For="@(() => userRequest.Password)" InputType="InputType.Password" Variant="Variant.Outlined" />
            <MudTextField Label="CONFIRM A PASSWORD" @bind-Value="userRequest.ConfirmPassword" For="@(() => userRequest.ConfirmPassword)" InputType="InputType.Password" Variant="Variant.Outlined" />
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Info" Style="margin:auto; text-transform:capitalize">Register</MudButton>
        </MudStack>
    </EditForm>
</MudPaper>


@code {
    private RegisterUserRequest userRequest = new RegisterUserRequest();
    bool success;
    private Uri? _registerUser;

    protected override async Task OnInitializedAsync()
    {
        const string registerUserControllerUri = "api/authentication/register";
        _registerUser = new Uri(httpClient.BaseAddress!, registerUserControllerUri);
    }


    private async Task RegisterUser()
    {
        if(!success)
        {
            return;
        }

        var response = await httpClient.PostAsJsonAsync(_registerUser, userRequest);

        if(response.IsSuccessStatusCode)
        {
            userRequest = new RegisterUserRequest();
            success = false;
            StateHasChanged();
        }
        else
        {
            NavigationManager.NavigateTo("/error");
        }
    }

    private async void OnValidSubmit(EditContext context)
    {
        success = true;
        await RegisterUser();

        StateHasChanged();
    }
}
