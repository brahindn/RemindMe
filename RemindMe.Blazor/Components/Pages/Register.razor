@page "/register"

@rendermode InteractiveServer
@using RemindMe.Contracts.Requests
@inject NavigationManager NavigationManager
@inject HttpClient httpClient


<MudPaper Class="pa-2" Style="width:40%; height:50%; align-self:center">
    <EditForm Model="model" OnValidSubmit="OnValidSubmit" FormName="Register" >
        <DataAnnotationsValidator />
        <MudStack Style="width: 100%;">
            <MudText>User name</MudText>
            <MudTextField Style="margin-right:3px" @bind-Value="model.UserName" For="@(() => model.UserName)" />
            <MudText>Email</MudText>
            <MudTextField Class="mt-3" @bind-Value="model.Email" For="@(() => model.Email)" />
            <MudText>Password</MudText>
            <MudTextField Class="mt-3" @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" />
            <MudText>Confirm Password</MudText>
            <MudTextField Class="mt-3" @bind-Value="model.ConfirmPassword" For="@(() => model.ConfirmPassword)" InputType="InputType.Password" />
            <MudDivider/>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
        </MudStack>
    </EditForm>
</MudPaper>
    
       

@code {

    private RegisterUserRequest model = new RegisterUserRequest();
    bool success;
    private Uri? _registerUser;

    protected override async Task OnInitializedAsync()
    {
        const string registerUserControllerUri = "api/authentication/register";
        _registerUser = new Uri(httpClient.BaseAddress!, registerUserControllerUri);
    }


    private async Task RegisterUser()
    {
        if(!success)
        {
            return;
        }

        var response = await httpClient.PostAsJsonAsync(_registerUser, model);
    }

    private void OnValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
    }
}
