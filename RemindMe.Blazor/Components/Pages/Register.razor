@page "/register";

@rendermode InteractiveServer
@using RemindMe.Contracts.Requests
@inject NavigationManager NavigationManager
@inject HttpClient httpClient

<MudContainer Class="col-md-4">
    <EditForm Model="model" OnValidSubmit="OnValidSubmit" FormName="Register">
        <DataAnnotationsValidator/>
        <MudSpacer/>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="First name" HelperText="Max. 8 characters"
                    @bind-Value="model.UserName" For="@(() => model.UserName)" />
                    <MudTextField Label="Email" Class="mt-3"
                    @bind-Value="model.Email" For="@(() => model.Email)" />
                    <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                    @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" />
                    <MudTextField Label="Password" HelperText="Repeat the password" Class="mt-3"
                    @bind-Value="model.Password2" For="@(() => model.Password2)" InputType="InputType.Password" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </EditForm>
</MudContainer>

@code {

    private RegisterUserRequest model = new RegisterUserRequest();
    bool success;
    private Uri? _registerUser;

    protected override async Task OnInitializedAsync()
    {
        const string registerUserControllerUri = "api/user/register-user";
        _registerUser = new Uri(httpClient.BaseAddress!, registerUserControllerUri);
    }


    private async Task RegisterUser()
    {
        if(!success)
        {
            return;
        }

        var response = await httpClient.PostAsJsonAsync(_registerUser, model);
    }

    private void OnValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
    }
}
